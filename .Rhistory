setwd("~/temp/lucca/r-scripts")
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
shapiro.test(mut$E)
shapiro.test(mut$P)
shapiro.test(mut$J)
attach(mut)
#Colocando dados na vertical
mut.vert<-data.frame(Score<-gl(4,33), Tools<-c(R,E,P,J))
mut.vert
#Media
tapply(Tools, Score, mean)
#Desvio Padrão
tapply(Tools, Score, sd)
#Variânica
tapply(Tools, Score, var)
kruskal.test(Tools~Score, mut.vert)
kruskal.test(list(R,E,P,J))
# Wilcox Test
print("Wilcox Test R e E")
me = wilcox.test(Tools[1:33],Tools[34:66],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e P")
mc = wilcox.test(Tools[1:33],Tools[67:99],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e J")
mr = wilcox.test(Tools[1:33],Tools[100:132],paired=TRUE,alternative="two.sided")
p=c(me$p.value, mc$p.value, mr$p.value)
p
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/p.adjust.html
padj=p.adjust(p, method = "holm", n = length(p))
#p.adjust(p, method = "bonferroni", n = length(p))
padj
padj[1]
cat("Test Sets;", "p-value;", "adjusted p-value;", "\nRE;", me$p.value, ";", padj[1], "\nRP;", mc$p.value, ";", padj[2], "\nRJ;", mr$p.value, ";", padj[3])
p=c(me$p.value, mc$p.value, mr$p.value)
p
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/p.adjust.html
padj=p.adjust(p, method = "holm", n = length(p))
#p.adjust(p, method = "bonferroni", n = length(p))
padj
padj[1]
cat("Test Sets;", "p-value;", "adjusted p-value;", "\nRE;", me$p.value, ";", padj[1], "\nRP;", mc$p.value, ";", padj[2], "\nRJ;", mr$p.value, ";", padj[3])
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)"))
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
shapiro.test(mut$E)
shapiro.test(mut$P)
shapiro.test(mut$J)
#Teste de Normalidade
shapiro.test(mut$R)
hist(mut$R)
#Teste de Normalidade
shapiro.test(mut$R)
hist(mut$R)
hist(mut$R)
hist(mut$R)
#Teste de Normalidade
shapiro.test(mut$R)
ks.test(mut$R, "pnorm", mean(mut$R), sd(mut$R), exact = TRUE)
ks.test(mut$R, "pnorm", mean(mut$R), sd(mut$R), exact = TRUE)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
#setEPS()
#postscript("mut-boxplot.eps")
#png('mut-boxplot.png')
#boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
View(mut);
View(mut$R);
hist(mut$R)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
#boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
hist(mut$R)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
#boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
hist(mut)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
#boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
hist(mut$R)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
#boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
hist(mut$R, col="darkblue", border="black");
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
install.packages("dgof")
library(dgof)
ks.test(mut$R, "pnorm", mean(mut$R), sd(mut$R), exact = TRUE)
install.packages("dgof")
library(dgof)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
ks.test(mut$R, "pnorm", mean(mut$R), sd(mut$R))
install.packages("dgof")
install.packages("dgof")
library(dgof)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
ks.test(mut$R, "pnorm", mean(mut$R), sd(mut$R))
hist (swiss$Examination, col=c ("violet”, "Chocolate2"), xlab="Examination”, las =1, main=" color histogram")
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
ks.test(mut$R, "pnorm", mean(mut$R), sd(mut$R))
set.seed(14)                # Ajustar semente aleatória
dados <- rchisq(200, 10)    # Gerar 200 observações
hist(dados)                 # Gerar histograma
# Carregar pacote
library(ggplot2)
#install.packages("dgof")
#library(dgof)
setEPS()
postscript("histogram-01.eps")
### Como fazer um histograma no R
### www.manipulandados.com.br
set.seed(14)                # Ajustar semente aleatória
dados <- rchisq(200, 10)    # Gerar 200 observações
hist(dados)                 # Gerar histograma
setEPS()
postscript("histogram-01.eps")
### Como fazer um histograma no R
### www.manipulandados.com.br
set.seed(14)                # Ajustar semente aleatória
dados <- rchisq(200, 10)    # Gerar 200 observações
hist(dados)                 # Gerar histograma
### Como fazer um histograma no R
### www.manipulandados.com.br
# Carregar pacote
library(ggplot2)
postscript("histogram-02.eps")
# Transformar vetor para data.frame
dados2 <- data.frame(y = dados)
# Criar histograma
h1 <- ggplot(dados2, aes(y)) + geom_histogram() +
xlab("Dados") + ylab("Frequencia")
h1
View(dados)
setEPS()
postscript("histogram-01.eps")
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
hist(mut)
hist(mut$R)
hist(mut$E)
setEPS()
source("~/temp/lucca/r-scripts/script-mut.r")
hist(mut$E)
source("~/temp/lucca/r-scripts/script-mut.r", echo=TRUE)
source("~/temp/lucca/r-scripts/script-cov.r", echo=TRUE)
boxplot(cov,ylab="Statement Coverage",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
#Lendo dados
cov<-read.csv("cov-s.csv",sep=";",dec=",",header=TRUE)
cov
summary(cov)
setEPS()
postscript("cov-boxplot.eps")
png('cov-boxplot.png')
boxplot(cov,ylab="Statement Coverage",xlab="Test Set",names=c("Randoop (R)", "EvoSuite (E)","Palus (P)", "JTExpert (J)", "AllSmart (AS)"))
dev.off()
#Teste de Normalidade
bartlett.test(cov)
#Teste de Normalidade
shapiro.test(cov$R)
shapiro.test(cov$E)
shapiro.test(cov$P)
shapiro.test(cov$J)
attach(cov)
#Colocando dados na vertical
cov.vert<-data.frame(Coverage<-gl(4,33), Tools<-c(R,E,P,J))
cov.vert
#Media
tapply(Tools, Coverage, mean)
#Desvio Padrão
tapply(Tools, Coverage, sd)
#Variânica
tapply(Tools, Coverage, var)
kruskal.test(Tools~Coverage, cov.vert)
kruskal.test(list(R,E,P,J))
# Wilcox Test
print("Wilcox Test R e E")
me = wilcox.test(Tools[1:33],Tools[34:66],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e P")
mc = wilcox.test(Tools[1:33],Tools[67:99],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e J")
mr = wilcox.test(Tools[1:33],Tools[100:132],paired=TRUE,alternative="two.sided")
p=c(me$p.value, mc$p.value, mr$p.value)
p
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/p.adjust.html
padj=p.adjust(p, method = "holm", n = length(p))
#p.adjust(p, method = "bonferroni", n = length(p))
padj
padj[1]
cat("Test Sets;", "p-value;", "adjusted p-value;", "\nRE;", me$p.value, ";", padj[1], "\nRP;", mc$p.value, ";", padj[2], "\nRJ;", mr$p.value, ";", padj[3])
#Teste de Normalidade
shapiro.test(cov$R)
shapiro.test(cov$E)
shapiro.test(cov$P)
shapiro.test(cov$J)
#Lendo dados
mut<-read.csv("mut-s.csv",sep=";",dec=",",header=TRUE)
mut
summary(mut)
setEPS()
postscript("mut-boxplot.eps")
png('mut-boxplot.png')
boxplot(mut,ylab="Mutation Score",xlab="Test Sets",names=c("R", "E","P", "J", "AS"))
dev.off()
#Teste de Normalidade
bartlett.test(mut)
#Teste de Normalidade
shapiro.test(mut$R)
shapiro.test(mut$E)
shapiro.test(mut$P)
shapiro.test(mut$J)
shapiro.test(mut$AS)
attach(mut)
#Colocando dados na vertical
mut.vert<-data.frame(Score<-gl(5,33), Tools<-c(R,E,P,J,AS))
mut.vert
#Media
tapply(Tools, Score, mean)
#Desvio Padrão
tapply(Tools, Score, sd)
#Variânica
tapply(Tools, Score, var)
kruskal.test(Tools~Score, mut.vert)
kruskal.test(list(R,E,P,J,AS))
# Wilcox Test
print("Wilcox Test R e E")
re = wilcox.test(Tools[1:33],Tools[34:66],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e P")
rp = wilcox.test(Tools[1:33],Tools[67:99],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e J")
rj = wilcox.test(Tools[1:33],Tools[100:132],paired=TRUE,alternative="two.sided")
# Wilcox Test
print("Wilcox Test R e AS")
ras = wilcox.test(Tools[1:33],Tools[133:165],paired=TRUE,alternative="two.sided")
p=c(re$p.value, rp$p.value, rj$p.value, ras$p.value)
p
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/p.adjust.html
padj=p.adjust(p, method = "holm", n = length(p))
#p.adjust(p, method = "bonferroni", n = length(p))
padj
padj[1]
cat("Test Sets;", "p-value;", "adjusted p-value;", "\nRE;", re$p.value, ";", padj[1], "\nRP;", rp$p.value, ";", padj[2], "\nRJ;", rj$p.value, ";", padj[3], "\nRAS;", ras$p.value, ";", padj[4])
#Lendo dados
ts<-read.csv("ts-s.csv",sep=";",dec=",",header=TRUE)
ts
summary(ts)
setEPS()
postscript("ts-boxplot.eps")
png('ts-boxplot.png')
boxplot(ts,ylab="Number of Tests",xlab="Test Sets",names=c("R", "E","P", "J", "AS"))
dev.off()
#Teste de Normalidade
bartlett.test(ts)
#Teste de Normalidade
shapiro.test(ts$R)
shapiro.test(ts$E)
shapiro.test(ts$P)
shapiro.test(ts$J)
shapiro.test(ts$AS)
